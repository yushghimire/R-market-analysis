df_databaseMerge$Frequency <- NULL
#---customer
#customers$Recency <- NULL
#customers$Monetary <- NULL
#customers$Frequency <- NULL
#customers$recency.log <- NULL
#customers$frequency.log <- NULL
#customers$monetary.log <- NULL
#customers$recency.z <- NULL
#customers$frequency.z <- NULL
#customers$monetary.z <- NULL
customers$cluster<-NULL
df_databaseMerge$SVM_response <-NULL
df_databaseMerge$Random_response <-NULL
df_databaseMerge$adaBoost_response <- NULL
df_databaseMerge$total_response <-NULL
df_totat<-merge(customers,df_databaseMerge,by=c("memberNumber"))
write.table(df_totat,"Customer.csv",row.names = F,sep=",")
#this is done for faster upload into mySQL
#write.csv(df_databaseMerge, "uploadCustomer.csv", row.names=FALSE)
dbListConnections(drv)
lapply(dbListConnections(drv), dbDisconnect)
remove(con,customers,drv,newdf,frequency,df_rawFormattedData,df_originalData,df_databaseMerge,databaseMerge)
getwd()
setwd("C:/xampp/htdocs/DAI")
library(RMySQL)
drv <- dbDriver("MySQL")
drv
con <- dbConnect(drv,dbname="ims",user="root",password="",host="localhost")
con
class(con)
database_data <- dbGetQuery(con,"select * from itemlist")
write.csv(database_data,"item.csv",row.names = F,quote = F)
df_item <-read.table("item.csv",header=T,sep=",",quote="",dec=".",strip.white = T,blank.lines.skip = T,comment.char = "",allowEscapes = F)
df_item$costPrice<-NULL
df_item$quantity <- NULL
View(df_item)
databaseMerge <- dbGetQuery(con,"select * from customer")
View(databaseMerge)
databaseMerge$total_response <- NULL
databaseMerge$cluster <- NULL
database_groceries <-dbGetQuery(con,"select * from transaction")
database_groceries <-dbGetQuery(con,"select * from transaction")
database_groceries$quantity<-NULL;
write.table(database_groceries,"groceries1.csv",row.names = F,sep=",",quote=F)
df_groceries <-read.table("groceries1.csv",header=T,sep=",",quote="",dec=".",strip.white = T,blank.lines.skip = T,comment.char = "",allowEscapes = F)
df_groceries$Frequency <- 1
write.csv(df_groceries,"groceries1.csv",row.names = F,quote=F)
df_groceries <-read.table("groceries1.csv",header=T,sep=",",quote="",dec=".",strip.white = T,blank.lines.skip = T,comment.char = "",allowEscapes = F)
View(df_groceries)
df_originalData <- merge(df_groceries,df_item,by="itemName")
remove(df_item)
remove(df_groceries,database_data, database_groceries)
library(plyr)
df_itemList <- ddply(df_originalData, c("memberNumber","purchaseDate"), function(df1)paste(as.numeric(sum(df1$sellPrice))))
df_itemList2 <- ddply(df_originalData, c("memberNumber","purchaseDate"), function(df1)paste(df1$itemName,collapse = ","))
View(df_itemList)
View(df_itemList2)
df_rawFormattedData<- merge(df_itemList,df_itemList2,by=c("memberNumber","purchaseDate"))
View(df_itemList)
View(df_itemList2)
View(df_itemList)
View(df_rawFormattedData)
colnames(df_rawFormattedData) <- c("memberNumber","purchaseDate" , "sellPrice", "itemlist")
remove(df_itemList2)
remove(df_itemList)
View(df_rawFormattedData)
<- df_rawFormattedData
df_customerProfile
df_customerProfile <- df_rawFormattedData
l
df_customerProfile$itemlist <- NULL
library(lubridate)
library(plyr)
#coded by: yushghimire
#-------------------------RFM calulation start------------------------------------
#this is the RFM analysis for the dataset in the market for the inventory system Show Shopper
#user defined function
getDataFrame <- function(df){
library(lubridate)
library(plyr)
#Recency----------------
#order the dataframe by date ascendingly, order the data in ascending order with the order function
#here df_customerProfile[,2] chooses the second column of the data frame
#arranging in descending order so that the most recent be on top for each memmber with the help of decreasing attribute
df_dateSorted <- arrange(df_customerProfile,desc(purchaseDate))
#remove duplicate according to customer ID, where !duplicate removes any duplicate of data
df_newDateSorted <- df_dateSorted[!duplicated(df_dateSorted[,1]),]
#sys.date() function gives the system date in format DD-MM-YYY
z<-Sys.Date()
#where as.date takes the data into date format
#format attribute gives how the data is to be read
#dfDate<-as.Date(df_newDateSorted[,2],format='%d/%m/%Y')
#difftime is a function to calculate the difference between 2 date
Recency<-as.numeric(difftime(z,df_newDateSorted$purchaseDate,units="days"))
# add the Days column to the newdf data frame, cbind is used to bind together, here it is used to bind Recency with data frame
newdf <-cbind(df_newDateSorted,Recency)
remove(df_dateSorted)
remove(df_newDateSorted)
remove(z)
remove(Recency)
#remove
newdf$itemlist <- NULL
newdf$sellPrice <- NULL
newdf$purchaseDate <- NULL
#sort newdf in terms of ID
newdf<-newdf[order(newdf[,1]),]
#Frequency-----------
#calculate the frequency through sum
frequencyBought <- ddply(df_originalData, c("memberNumber"), function(df1)paste((sum(df1$Frequency))))
Frequency <-as.numeric(frequencyBought[,2])
newdf <- cbind(newdf,Frequency)
remove(frequencyBought)
#money--------------------------------
#calculate money for each transaction
#tapply is used to break up the dataset into groups and calculate something like mean, average
#refer tapply() function here https://www.r-bloggers.com/r-function-of-the-day-tapply-2/
#first attribute of tapply is the column in which the calculation is to take place
#second attribute is on which group is to be divided
#last one is the calculation we are to do, here which is sum
monetaryOnItem <- ddply(df_originalData, c("memberNumber"), function(df1)paste((sum(df1$sellPrice))))
Money <- as.numeric(monetaryOnItem[,2])
#for RFM analysis we have to calulate the average spending in a transaction by a customer
Monetary <-Money/Frequency
Monetary  <-as.numeric(Monetary)
newdf <- cbind(newdf,Monetary)
#removing temporary value and data.frame
remove(Money)
remove(monetaryOnItem)
remove(Frequency)
remove(Monetary)
return(newdf)
}
#------------------------------RFM calculation ends------------------------------------------
#--------------------------------####main function####--------------------------------------
getwd()
#Implementing RFM Analysis
setwd("C:/xampp/htdocs/DAI")
library(RMySQL)
drv <- dbDriver("MySQL")
drv
#-----------database connection with the R---------------------
con <- dbConnect(drv,dbname="ims",user="root",password="",host="localhost")
con
class(con)
#read itemlist from database and save to csv
database_data <- dbGetQuery(con,"select * from itemlist")
write.csv(database_data,"item.csv",row.names = F,quote = F)
df_item <-read.table("item.csv",header=T,sep=",",quote="",dec=".",strip.white = T,blank.lines.skip = T,comment.char = "",allowEscapes = F)
df_item$costPrice<-NULL
df_item$quantity <- NULL
databaseMerge <- dbGetQuery(con,"select * from customer")
databaseMerge$total_response <- NULL
databaseMerge$cluster <- NULL
#for transaction data
database_groceries <-dbGetQuery(con,"select * from transaction")
database_groceries$quantity<-NULL;
write.table(database_groceries,"groceries1.csv",row.names = F,sep=",",quote=F)
df_groceries <-read.table("groceries1.csv",header=T,sep=",",quote="",dec=".",strip.white = T,blank.lines.skip = T,comment.char = "",allowEscapes = F)
df_groceries$Frequency <- 1
write.csv(df_groceries,"groceries1.csv",row.names = F,quote=F)
df_groceries <-read.table("groceries1.csv",header=T,sep=",",quote="",dec=".",strip.white = T,blank.lines.skip = T,comment.char = "",allowEscapes = F)
#customer table
#customer <- dbSendQuery(con,"select * from customer")
#write.csv(customer,"customer_temp",row.names = F,quote = F)
#merge function is used to merge two data frame on the basis of some  common column i.e INNER JOIN
#here merge attribute uses itemName to combine two data frame together
df_originalData <- merge(df_groceries,df_item,by="itemName")
remove(df_item)
remove(df_groceries,database_data, database_groceries)
#convert dataframe to transaction format using ddply;
#group all the items that were bought together; by the same customer on the same date
library(plyr)
#applys the function given as an attribute as shown below, taking 2 columns reference
#below first the sellPrice in each transaction is calculated
#each itemset price is summed according to their appropriate data
df_itemList <- ddply(df_originalData, c("memberNumber","purchaseDate"), function(df1)paste(as.numeric(sum(df1$sellPrice))))
#secondly the itemset is produced in a basket for apriori algorithm
df_itemList2 <- ddply(df_originalData, c("memberNumber","purchaseDate"), function(df1)paste(df1$itemName,collapse = ","))
#merge both the sellPrice in a transaction and itemset in that transaction
df_rawFormattedData<- merge(df_itemList,df_itemList2,by=c("memberNumber","purchaseDate"))
#rename the column according to our wish
colnames(df_rawFormattedData) <- c("memberNumber","purchaseDate" , "sellPrice", "itemlist")
remove(df_itemList2)
remove(df_itemList)
df_customerProfile <- df_rawFormattedData
#remove member number and date
df_customerProfile$itemlist <- NULL
#invoking the user defined function
customers<-getDataFrame(df_customerProfile)
#removing temporary
remove(df_customerProfile)
View(customers)
customers <- customers[order(-customers$Monetary),]
customers <- customers[order(customers$memberNumber),]
customers$recency.log <- log(customers$Recency)
customers$frequency.log <- log(customers$Frequency)
customers$monetary.log <- log(customers$Monetary)
# Z-scores, it is used in case of k means clustering
customers$recency.z <- scale(customers$recency.log, center=TRUE, scale=TRUE)
customers$frequency.z <- scale(customers$frequency.log, center=TRUE, scale=TRUE)
customers$monetary.z <- scale(customers$monetary.log, center=TRUE, scale=TRUE)
View(customers)
#coded by: yushghimire
#-------------------------RFM calulation start------------------------------------
#this is the RFM analysis for the dataset in the market for the inventory system Show Shopper
#user defined function
getDataFrame <- function(df){
library(lubridate)
library(plyr)
#Recency----------------
#order the dataframe by date ascendingly, order the data in ascending order with the order function
#here df_customerProfile[,2] chooses the second column of the data frame
#arranging in descending order so that the most recent be on top for each memmber with the help of decreasing attribute
df_dateSorted <- arrange(df_customerProfile,desc(purchaseDate))
#remove duplicate according to customer ID, where !duplicate removes any duplicate of data
df_newDateSorted <- df_dateSorted[!duplicated(df_dateSorted[,1]),]
#sys.date() function gives the system date in format DD-MM-YYY
z<-Sys.Date()
#where as.date takes the data into date format
#format attribute gives how the data is to be read
#dfDate<-as.Date(df_newDateSorted[,2],format='%d/%m/%Y')
#difftime is a function to calculate the difference between 2 date
Recency<-as.numeric(difftime(z,df_newDateSorted$purchaseDate,units="days"))
# add the Days column to the newdf data frame, cbind is used to bind together, here it is used to bind Recency with data frame
newdf <-cbind(df_newDateSorted,Recency)
remove(df_dateSorted)
remove(df_newDateSorted)
remove(z)
remove(Recency)
#remove
newdf$itemlist <- NULL
newdf$sellPrice <- NULL
newdf$purchaseDate <- NULL
#sort newdf in terms of ID
newdf<-newdf[order(newdf[,1]),]
#Frequency-----------
#calculate the frequency through sum
frequencyBought <- ddply(df_originalData, c("memberNumber"), function(df1)paste((sum(df1$Frequency))))
Frequency <-as.numeric(frequencyBought[,2])
newdf <- cbind(newdf,Frequency)
remove(frequencyBought)
#money--------------------------------
#calculate money for each transaction
#tapply is used to break up the dataset into groups and calculate something like mean, average
#refer tapply() function here https://www.r-bloggers.com/r-function-of-the-day-tapply-2/
#first attribute of tapply is the column in which the calculation is to take place
#second attribute is on which group is to be divided
#last one is the calculation we are to do, here which is sum
monetaryOnItem <- ddply(df_originalData, c("memberNumber"), function(df1)paste((sum(df1$sellPrice))))
Money <- as.numeric(monetaryOnItem[,2])
#for RFM analysis we have to calulate the average spending in a transaction by a customer
Monetary <-Money/Frequency
Monetary  <-as.numeric(Monetary)
newdf <- cbind(newdf,Monetary)
#removing temporary value and data.frame
remove(Money)
remove(monetaryOnItem)
remove(Frequency)
remove(Monetary)
return(newdf)
}
#------------------------------RFM calculation ends------------------------------------------
#--------------------------------####main function####--------------------------------------
getwd()
#Implementing RFM Analysis
setwd("C:/xampp/htdocs/DAI")
library(RMySQL)
drv <- dbDriver("MySQL")
drv
#-----------database connection with the R---------------------
con <- dbConnect(drv,dbname="ims",user="root",password="",host="localhost")
con
class(con)
#read itemlist from database and save to csv
database_data <- dbGetQuery(con,"select * from itemlist")
write.csv(database_data,"item.csv",row.names = F,quote = F)
df_item <-read.table("item.csv",header=T,sep=",",quote="",dec=".",strip.white = T,blank.lines.skip = T,comment.char = "",allowEscapes = F)
df_item$costPrice<-NULL
df_item$quantity <- NULL
databaseMerge <- dbGetQuery(con,"select * from customer")
databaseMerge$total_response <- NULL
databaseMerge$cluster <- NULL
#for transaction data
database_groceries <-dbGetQuery(con,"select * from transaction")
database_groceries$quantity<-NULL;
write.table(database_groceries,"groceries1.csv",row.names = F,sep=",",quote=F)
df_groceries <-read.table("groceries1.csv",header=T,sep=",",quote="",dec=".",strip.white = T,blank.lines.skip = T,comment.char = "",allowEscapes = F)
df_groceries$Frequency <- 1
write.csv(df_groceries,"groceries1.csv",row.names = F,quote=F)
df_groceries <-read.table("groceries1.csv",header=T,sep=",",quote="",dec=".",strip.white = T,blank.lines.skip = T,comment.char = "",allowEscapes = F)
#customer table
#customer <- dbSendQuery(con,"select * from customer")
#write.csv(customer,"customer_temp",row.names = F,quote = F)
#merge function is used to merge two data frame on the basis of some  common column i.e INNER JOIN
#here merge attribute uses itemName to combine two data frame together
df_originalData <- merge(df_groceries,df_item,by="itemName")
remove(df_item)
remove(df_groceries,database_data, database_groceries)
#convert dataframe to transaction format using ddply;
#group all the items that were bought together; by the same customer on the same date
library(plyr)
#applys the function given as an attribute as shown below, taking 2 columns reference
#below first the sellPrice in each transaction is calculated
#each itemset price is summed according to their appropriate data
df_itemList <- ddply(df_originalData, c("memberNumber","purchaseDate"), function(df1)paste(as.numeric(sum(df1$sellPrice))))
#secondly the itemset is produced in a basket for apriori algorithm
df_itemList2 <- ddply(df_originalData, c("memberNumber","purchaseDate"), function(df1)paste(df1$itemName,collapse = ","))
#merge both the sellPrice in a transaction and itemset in that transaction
df_rawFormattedData<- merge(df_itemList,df_itemList2,by=c("memberNumber","purchaseDate"))
#rename the column according to our wish
colnames(df_rawFormattedData) <- c("memberNumber","purchaseDate" , "sellPrice", "itemlist")
remove(df_itemList2)
remove(df_itemList)
df_customerProfile <- df_rawFormattedData
#remove member number and date
df_customerProfile$itemlist <- NULL
#invoking the user defined function
customers<-getDataFrame(df_customerProfile)
#removing temporary
remove(df_customerProfile)
customers <- customers[order(-customers$Monetary),]
customers <- customers[order(customers$memberNumber),]
# Log-transform positively-skewed variables
customers$recency.log <- log(customers$Recency)
customers$frequency.log <- log(customers$Frequency)
customers$monetary.log <- log(customers$Monetary)
# Z-scores, it is used in case of k means clustering
customers$recency.z <- scale(customers$recency.log, center=TRUE, scale=TRUE)
customers$frequency.z <- scale(customers$frequency.log, center=TRUE, scale=TRUE)
customers$monetary.z <- scale(customers$monetary.log, center=TRUE, scale=TRUE)
library(ggplot2)
library(scales)
# Original scale
#scatter.1 <- ggplot(customers, aes(x = Frequency, y = Monetary))
#scatter.1 <- scatter.1 + geom_point(aes(colour =Recency, shape = pareto))
#scatter.1 <- scatter.1 + scale_shape_manual(name = "80/20 Designation", values=c(17, 16))
#scatter.1 <- scatter.1 + scale_colour_gradient(name="Recency\n(Days since Last Purchase))")
#scatter.1 <- scatter.1 + scale_y_continuous(label=dollar)
#scatter.1 <- scatter.1 + xlab("Frequency (Number of Purchases)")
#scatter.1 <- scatter.1 + ylab("Monetary Value of Customer (Annual Sales)")
#scatter.1
# Log-transformed
#scatter.2 <- ggplot(customers, aes(x = frequency.log, y = monetary.log))
#scatter.2 <- scatter.2 + geom_point(aes(colour = recency.log, shape = pareto))
#scatter.2 <- scatter.2 + scale_shape_manual(name = "80/20 Designation", values=c(17, 16))
#scatter.2 <- scatter.2 + scale_colour_gradient(name="Log-transformed Recency")
#scatter.2 <- scatter.2 + xlab("Log-transformed Frequency")
#scatter.2 <- scatter.2 + ylab("Log-transformed Monetary Value of Customer")
#scatter.2
#-------------------------k means algorithm-----------------------------------------
#chossing the z value of R,F,M from the data frame for k means clustering
preprocessed <- customers[,8:10]
#NbCLust is used to suggest the best cluster number------------------------------
#library(NbClust)
#set.seed(1)
#NbClust() take attribute data minimum number of cluster, max number and method of clustering
#default value of Nbclust() for distance major is eculidean distance, which can be changed if any other is mentioned
#nc <- NbClust(preprocessed, min.nc=2, max.nc=10, method="kmeans")
#table(nc$Best.n[1,])
#nc$All.index # estimates for each number of clusters on 26 different metrics of model fit
#barplot(table(nc$Best.n[1,]),
#--------------------------------------------------------------------------------------
#number of cluster
#number of cluster was chossen as 4 because we evaluate all the possible optimum cluster number with
#the help of Nbclust() which check for all 30 indices to estimate the cluster
#refer https://www.rdocumentation.org/packages/NbClust/versions/3.0/topics/NbClust for all indices
#some of it are eblow technique, gap test etc
k<-4
#print the number of cluster
print(k)
set.seed(200)
# Run kmeans
# nstart = number of initial configurations; the best one is used
# $iter will return the iteration used for the final model
output <- kmeans(preprocessed, centers = k, nstart = 20)
# Add cluster membership to customers dataset
#it helps in knowing the cluster for each customer
var.name <- paste("cluster", k, sep="_")
customers[,(var.name)] <- output$cluster
customers[,(var.name)] <- factor(customers[,(var.name)], levels = c(1:k))
# Graph clusters
cluster_graph <- ggplot(customers, aes(x = frequency.log, y = monetary.log))
cluster_graph <- cluster_graph + geom_point(aes(colour = customers[,(var.name)]))
colors <- c('red','orange','green3','deepskyblue','blue','darkorchid4','violet','pink1','tan3','black')
cluster_graph <- cluster_graph + scale_colour_manual(name = "Cluster Group", values=colors)
cluster_graph <- cluster_graph + xlab("Log-transformed Frequency")
cluster_graph <- cluster_graph + ylab("Log-transformed Monetary Value of Customer")
title <- paste("k-means Solution with", k, sep=" ")
title <- paste(title, "Clusters", sep=" ")
print(cluster_graph)
# Cluster centers in original metrics
library(plyr)
cluster_centers <- ddply(customers, .(customers[,(var.name)]), summarize,
monetary=round(median(Monetary),2),# use median b/c this is the raw, heavily-skewed data
frequency=round(median(Frequency),1),
recency=round(median(Recency), 0))
names(cluster_centers)[names(cluster_centers)=="customers[, (var.name)]"] <- "Cluster"
print(cluster_centers)
#remove temporrary variables and data.frame
remove(output, var.name, cluster_graph, cluster_centers, title, colors)
remove(k)
remove(preprocessed)
#-------------------------------####end of main function####-------------------------------
customers$cluster <-customers$cluster_4
customers$cluster_4<-NULL
#calculate the frequency through sum
newdf <- data.frame("Var1"= customers$cluster)
newdf$Frequency <- 1
#calculate the frequency through sum
frequency <- ddply(newdf, c("Var1"), function(df1)paste((sum(df1$Frequency))))
names(frequency) [2] <-"Freq"
write.csv(frequency,"c.csv",row.names =T)
df_databaseMerge<- merge(x=databaseMerge,y=customers,by=c("memberNumber"), all.y= TRUE)
df_databaseMerge$recency.log <- NULL
df_databaseMerge$frequency.log <- NULL
df_databaseMerge$monetary.log <- NULL
df_databaseMerge$recency.z <- NULL
df_databaseMerge$frequency.z <- NULL
df_databaseMerge$monetary.z <- NULL
df_databaseMerge$Recency <- NULL
df_databaseMerge$Monetary <- NULL
df_databaseMerge$Frequency <- NULL
#---customer
#customers$Recency <- NULL
#customers$Monetary <- NULL
#customers$Frequency <- NULL
#customers$recency.log <- NULL
#customers$frequency.log <- NULL
#customers$monetary.log <- NULL
#customers$recency.z <- NULL
#customers$frequency.z <- NULL
#customers$monetary.z <- NULL
customers$cluster<-NULL
df_databaseMerge$SVM_response <-NULL
df_databaseMerge$Random_response <-NULL
df_databaseMerge$adaBoost_response <- NULL
df_databaseMerge$total_response <-NULL
df_totat<-merge(customers,df_databaseMerge,by=c("memberNumber"))
write.table(df_totat,"Customer.csv",row.names = F,sep=",")
#this is done for faster upload into mySQL
#write.csv(df_databaseMerge, "uploadCustomer.csv", row.names=FALSE)
dbListConnections(drv)
lapply(dbListConnections(drv), dbDisconnect)
remove(con,customers,drv,newdf,frequency,df_rawFormattedData,df_originalData,df_databaseMerge,databaseMerge)
View(df_totat)
View(df_totat)
#coded by:yushghimire
setwd("C:/xampp/htdocs/DAI")
#load library
library(randomForest)
library(e1071)
library(caret)
## Loading required package: lattice
## Loading required package: ggplot2
# Help on ramdonForest package and function
#Random Forest
df_item <-read.table("Customer.csv",header=T,sep=",",dec=".",strip.white = T,blank.lines.skip = T,comment.char = "",allowEscapes = F)
table(df_item$response)/nrow(df_item)
df_item[is.na(df_item)]<-'yes'
table(df_item$response)/nrow(df_item)
str(df_item)
set.seed(1000)
#used in random sampling from the dataset
#replace = T is sample with replacement, probability takes 60% of no and 40% of yesssssss
sample.data <- sample(2,
nrow(df_item),
replace = T,
prob = c(0.30,0.70))
train.set <- df_item[sample.data==1,]
test.set <- df_item[sample.data==2,]
str(train.set)
str(test.set)
#checking the ratio of no and yes in the sample training data and test data
table(train.set$response)/nrow(train.set)
table(test.set$response)/nrow(test.set)
varNames <- names(train.set)
# Exclude ID or Response variable
varNames <- varNames[!varNames %in% c("memberNumber","response")]
# add + sign between exploratory variables
forestFormula <- paste(varNames, collapse = "+")
randomForest.formula <- as.formula(paste("response", forestFormula, sep = " ~ "))
randomForest.result <- randomForest(randomForest.formula,
train.set,
ntree=500,
norm.votes = T,
importance=T)
#takes the formula as the first attribute, second attribute is the data
#attribute ntree is number of tree to grow
randomForest.result <- randomForest(randomForest.formula,
train.set,
ntree=500,
norm.votes = T,
importance=T)
varImpPlot(randomForest.result)
plot(randomForest.result)
# Predicting response variable
test.set$Random_response <- predict(randomForest.result ,test.set)
df_item$Random_response <- predict(randomForest.result ,df_item)
# Create Confusion Matrix
confusionMatrix(data=test.set$Random_response,
reference=test.set$response)
varNames <- names(train.set)
# Exclude ID or Response variable
varNames <- varNames[!varNames %in% c("memberNumber","response","Random_response")]
# add + sign between exploratory variables
formula <- paste(varNames, collapse = "+")
# Add response variable and convert to a formula object, which is to be used in Random Forest
SVM.formula <- as.formula(paste("response", formula, sep = " ~ "))
svm.model <- svm(SVM.formula, data = train.set, kernel= "radial", cost = 100, gamma = 1)
View(df_item)
randomForest?
